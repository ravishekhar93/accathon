package frames;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Akash
 */
public class TicketGui extends javax.swing.JFrame {
    ArrayList<Station> myList=new ArrayList<Station>();
    int ssid=0,dsid=0;
    int TotalRevenue=0,TotalTicketsSold=0;

    /**
     * Creates new form TicketGui
     */
    public TicketGui() {
        initComponents();
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        etSourceStation = new javax.swing.JTextField();
        etDestinationStation = new javax.swing.JTextField();
        etNumberOfTickets = new javax.swing.JTextField();
        btTicket = new javax.swing.JButton();
        btShowTicket = new javax.swing.JButton();
        btMasterPanel = new javax.swing.JButton();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("BANGALORE METRO");

        jLabel2.setText("Source Station:");

        jLabel3.setText("Destination Station:");

        jLabel4.setText("Number of Tickets:");

        etSourceStation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                etSourceStationActionPerformed(evt);
            }
        });

        etNumberOfTickets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                etNumberOfTicketsActionPerformed(evt);
            }
        });

        btTicket.setText("BOOK TICKET");
        btTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTicketActionPerformed(evt);
            }
        });

        btShowTicket.setText("SHOW PRICE");
        btShowTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btShowTicketActionPerformed(evt);
            }
        });

        btMasterPanel.setText("Master panel");
        btMasterPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMasterPanelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(etDestinationStation))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(etNumberOfTickets))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(26, 26, 26)
                        .addComponent(etSourceStation, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btTicket)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btShowTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btMasterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btMasterPanel)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(etSourceStation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(etDestinationStation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(etNumberOfTickets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btTicket)
                    .addComponent(btShowTicket))
                .addGap(67, 67, 67))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void etSourceStationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_etSourceStationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_etSourceStationActionPerformed

    private void etNumberOfTicketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_etNumberOfTicketsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_etNumberOfTicketsActionPerformed

    private void btShowTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btShowTicketActionPerformed
        int SourceStationId=Integer.parseInt(etSourceStation.getText().toString());
        int DestinationStationId=Integer.parseInt(etDestinationStation.getText().toString());
        int numberOfTickets=Integer.parseInt(etNumberOfTickets.getText().toString());
        TotalTicketsSold=TotalTicketsSold+numberOfTickets;
        
        ArrayList<Station> list=doFetchAlltheContetntsOfFareTable();
        myList=getSortedStations(list);
        int distance=getDistance(SourceStationId,DestinationStationId,myList);
        
        int fareForOnePerson=getInitialTarrif(distance, 25, 3, 11, 3);
        
        int totalFare=fareForOnePerson*numberOfTickets;
        
        TotalRevenue=TotalRevenue+totalFare;
        JOptionPane.showMessageDialog(this, "The total amount of  fare is: "+totalFare);
        
        
        
    }//GEN-LAST:event_btShowTicketActionPerformed

    private void btMasterPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMasterPanelActionPerformed
        MasterPanelFrame frame=new MasterPanelFrame();
        setVisible(false);
        frame.setVisible(true);
    }//GEN-LAST:event_btMasterPanelActionPerformed

    private void btTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTicketActionPerformed
        JOptionPane.showMessageDialog(this, "YOUR TICKET HASS BEEN SUCCESSFULY BOOKED");
        try {
            String id="1";
            Class.forName("oracle.jdbc.driver.OracleDriver");
            Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "system", "12345");
            PreparedStatement ps = con.prepareStatement("update TOTAL SET TICKETS=?,REVENUE=? where ID=?");
            ps.setInt(1, TotalTicketsSold);
            ps.setInt(2, TotalRevenue);
            ps.setString(3, id);


            int i = ps.executeUpdate();
            if (i == 1) {
                System.out.println("Tickets Updated");

            } else {
                System.out.println("Tickets updation failed");
            }
        } catch (Exception e) {
                e.printStackTrace();
        }
        
    }//GEN-LAST:event_btTicketActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicketGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicketGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicketGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicketGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TicketGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btMasterPanel;
    private javax.swing.JButton btShowTicket;
    private javax.swing.JButton btTicket;
    private javax.swing.JTextField etDestinationStation;
    private javax.swing.JTextField etNumberOfTickets;
    private javax.swing.JTextField etSourceStation;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables

    private ArrayList<Station> doFetchAlltheContetntsOfFareTable() {
        ArrayList<Station> list=new ArrayList<Station>();
            try {
            
            Class.forName("oracle.jdbc.driver.OracleDriver");
            Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "system", "12345");
            Statement ps = con.createStatement();
            ps.executeQuery("select * from STATION");
            ResultSet rs = ps.getResultSet();
            while (rs.next()) {
                //Retrieve by column name
                int bsid=-1,asid=1;
                int id=rs.getInt("SID");
                String name=rs.getString("SNAME");
                String code=rs.getString("SCODE");
                String beforeStationId=rs.getString("BEFORESTATION");
                if(beforeStationId==null){
                    bsid=-1;
                }else{
                    bsid=Integer.parseInt(beforeStationId);
                }
                String afterStationId=rs.getString("AFTERSTATION");
                if(afterStationId==null){
                    asid=-1;
                }else{
                    asid=Integer.parseInt(afterStationId);
                }

                //Display values
                System.out.print("ID: " + id);
                System.out.print("name: " + name);
                System.out.print("code: " + code);
                System.out.print("beforeStation: " + bsid);
                System.out.print("afterStation: " + asid);
                
                list.add(new Station(name,id,bsid,asid,code));
                
            }
            System.out.println("FETCHING COMPLETE");
            rs.close();
            ps.close();
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
            
            System.out.println("exiting");
        return list;
    }

    private ArrayList<Station> getSortedStations(ArrayList<Station> stationRandom) {
        //Getting the starting station
		int n=stationRandom.size();
		ArrayList<Station> stationOrder=new ArrayList<Station>();
		for(Station temp: stationRandom){
			if(temp.getBefore()==-1){
				stationOrder.add(temp);
			}
		}
		for(int i=0; i<n-1;i++){
			for(Station temp: stationRandom){
				if(stationOrder.get(i).getAfter()==temp.getId()){
					stationOrder.add(temp);
					break;
				}
			}
		}
		
		return stationOrder;
    }


    private int getDistance(int SourceStationId, int DestinationStationId, ArrayList<Station> stations) {
       int sourceIDX=-1;
		int destIDX=-1;
		for(int i=0;i<stations.size();i++){
			Station station = stations.get(i);
			if(station.getId()==sourceIDX){
				sourceIDX=i;
			}else if(station.getId()==destIDX){
				destIDX=i;
			}
		}			
		
		int res= sourceIDX-destIDX;
		return Math.abs(res);
    }

    private int getInitialTarrif(int distance, int maxFare, int baseDistance, int baseCost, int costMultiplier) {
        int cost=-1;
		
		if(distance<=baseDistance){
			cost=baseCost;
		}else if(distance>baseDistance){
			cost=baseCost+((distance-baseDistance)*costMultiplier);
		}
		
		if(cost>maxFare){
			cost=maxFare;
		}
		
		return cost;
        
    }
}
